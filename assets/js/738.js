/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([[738],{

/***/ 9738:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Timeline)\n});\n\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/assets/components/calc/Timeline.vue?vue&type=template&id=71381ce5&\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"service-timeline\", attrs: { id: \"timeline\" } },\n    [\n      _c(\"div\", { staticClass: \"container-fluid\" }, [\n        _c(\"h2\", { staticClass: \"service-timeline__heading\" }, [\n          _vm._v(\"Timeline for a similar project\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"service-timeline__subheading\" }, [\n          _vm._v(\n            \"\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua.\\n    \"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\n          \"div\",\n          { staticClass: \"service-timeline__chart\" },\n          [\n            _c(\"Chart\", {\n              attrs: { options: _vm.options, \"constructor-type\": \"ganttChart\" }\n            })\n          ],\n          1\n        )\n      ])\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n;// CONCATENATED MODULE: ./src/assets/components/calc/Timeline.vue?vue&type=template&id=71381ce5&\n\n// EXTERNAL MODULE: ./node_modules/highcharts/highcharts.js\nvar highcharts = __webpack_require__(603);\nvar highcharts_default = /*#__PURE__*/__webpack_require__.n(highcharts);\n// EXTERNAL MODULE: ./node_modules/highcharts/modules/gantt.js\nvar gantt = __webpack_require__(564);\nvar gantt_default = /*#__PURE__*/__webpack_require__.n(gantt);\n// EXTERNAL MODULE: ./node_modules/highcharts-vue/dist/highcharts-vue.min.js\nvar highcharts_vue_min = __webpack_require__(8049);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/assets/components/calc/Timeline.vue?vue&type=script&lang=js&\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nDate.prototype.addDays = function (days) {\n  var date = new Date(this.valueOf());\n  date.setDate(date.getDate() + days);\n  return date;\n};\n\ngantt_default()((highcharts_default()));\n/* harmony default export */ const Timelinevue_type_script_lang_js_ = ({\n  components: {\n    Chart: highcharts_vue_min.Chart\n  },\n  methods: {\n    hasStage: function hasStage(stage) {\n      var products = this.tasks.filter(function (product) {\n        return product.projectStage == stage;\n      });\n\n      if (Object.keys(products).length) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    computeStage: function computeStage(stage, duration, startDate) {\n      var _this = this;\n\n      // Average duration of project\n      var projectDuration = this.duration; // Duration of current stage (share)\n\n      var stage_duration = duration / this.allStagesDuration; // Duration of current stage (in days)\n\n      var duration_in_days = projectDuration * stage_duration * 30; // Substages in stage\n\n      var products = this.tasks.filter(function (product) {\n        return product.projectStage == stage;\n      }); // Duration of all stages\n\n      var all_substages_duration = 0;\n      Object.values(products).forEach(function (substage) {\n        all_substages_duration = all_substages_duration + substage.duration;\n      });\n      var substages = []; // Iterating substages\n\n      Object.values(products).forEach(function (substage) {\n        // Current substage duration (share)\n        var substage_duration = Math.round((substage.duration / all_substages_duration + Number.EPSILON) * 100) / 100; // Current substage duration (in days)\n\n        var substage_duration_in_days = Math.round(duration_in_days * substage_duration);\n        var substageSerie = {\n          name: substage.title,\n          colors: [substage.color],\n          data: []\n        }; // Check if substage has parallel tasks\n\n        var number_of_parallel_tasks = 0;\n        Object.values(substage.tasks).forEach(function (task) {\n          if (!task.duration) number_of_parallel_tasks = number_of_parallel_tasks + 1;\n        }); // Iterating tasks\n\n        var i = 1;\n        Object.values(substage.tasks).forEach(function (task) {\n          // Check if task is parallel\n          if (task.duration) {\n            var length = substage.tasks.length - number_of_parallel_tasks;\n            var task_duration_in_days = Math.round(task.duration * substage_duration_in_days);\n            var endDate = startDate.addDays(task_duration_in_days);\n            substageSerie.data.push({\n              name: task.title,\n              start: startDate.getTime(),\n              end: endDate.getTime(),\n              y: _this.utility.y\n            });\n            _this.utility.y++; // Adding parallel tasks\n\n            if (task.parallel) {\n              var parallels = task.parallel;\n              parallels.forEach(function (parallelTask) {\n                substageSerie.data.push({\n                  name: parallelTask + \"test\",\n                  start: startDate.getTime(),\n                  end: endDate.getTime(),\n                  y: _this.utility.y\n                });\n              });\n              _this.utility.y++;\n            }\n\n            if (i == length) {\n              substageSerie.data.push({\n                name: substage.title,\n                start: endDate.getTime(),\n                milestone: true,\n                y: _this.utility.y\n              });\n              _this.utility.y++;\n            }\n\n            i++;\n            startDate = endDate;\n            _this.utility.startDate = endDate;\n          }\n        });\n        substages.push(substageSerie);\n      });\n      return substages;\n    }\n  },\n  data: function data() {\n    var _options;\n\n    return {\n      options: (_options = {\n        chart: {\n          height: 600,\n          spacingLeft: 1,\n          plotBackgroundColor: \"#fff\"\n        },\n        plotOptions: {\n          series: {\n            animation: true // Do not animate dependency connectors\n\n          }\n        },\n        xAxis: [{\n          type: \"datetime\",\n          opposite: false,\n          gridLineColor: \"#E0E0E0\",\n          gridLineWidth: 1,\n          grid: {\n            enabled: false\n          },\n          labels: {\n            useHTML: true,\n            formatter: function formatter() {\n              var year = new Date(this.value).getFullYear().toString().substr(-2);\n              var month = new Date(this.value).toLocaleString(\"default\", {\n                month: \"short\"\n              });\n              return month + '<span class=\"chart__year\">' + year + \"</span>\";\n            },\n            y: 40,\n            style: {\n              fontFamily: \"Geometria\",\n              fontSize: \"14px\",\n              textTransform: \"uppercase\",\n              color: \"#979797\"\n            }\n          },\n          tickInterval: 1000 * 60 * 60 * 24 * 30,\n          // Month\n          min: new Date().getTime()\n        }, {\n          visible: false\n        }],\n        yAxis: {\n          type: \"category\",\n          visible: true,\n          labels: false,\n          title: \"\",\n          gridLineWidth: 0,\n          alternateGridColor: \"#F5F5F5\",\n          grid: {\n            borderWidth: 0,\n            enabled: false\n          }\n        },\n        tooltip: {\n          xDateFormat: \"%a %b %d\",\n          formatter: function formatter() {\n            var startDate = new Date(this.x);\n            var endDate = new Date(this.x2);\n\n            var _MS_PER_DAY = 1000 * 60 * 60 * 24;\n\n            var start = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());\n            var end = Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());\n            var difference = Math.floor((end - start) / _MS_PER_DAY);\n            if (this.x2) return \"<b>\" + this.series.name + \"</b></br>\" + this.point.name + \"</br>\" + difference + \" days\";else return \"<b>\" + this.series.name + \"</b></br>Stage completed\";\n          }\n        }\n      }, _defineProperty(_options, \"plotOptions\", {\n        series: {}\n      }), _defineProperty(_options, \"legend\", {\n        enabled: true,\n        useHTML: true,\n        align: \"left\",\n        margin: 15,\n        squareSymbol: false,\n        symbolPadding: 0,\n        itemMarginBottom: 20,\n        symbolHeight: 0,\n        symbolWidth: 0,\n        labelFormatter: function labelFormatter() {\n          var color = this.userOptions.colors[0];\n          var name = this.userOptions.name;\n          return \"\\n            <span class=\\\"legend-label\\\">\\n              <span class=\\\"legend-label__symbol\\\" style=\\\"background-color: \".concat(color, \"\\\"></span>\\n              \").concat(name, \"\\n            </span>\\n            \");\n        }\n      }), _defineProperty(_options, \"series\", []), _options),\n      utility: {\n        startDate: function startDate() {\n          var currentDate = new Date();\n          var startDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);\n          return startDate;\n        },\n        endDate: 0,\n        y: 0\n      }\n    };\n  },\n  watch: {\n    computedSeries: function computedSeries() {\n      this.options.series = this.computedSeries;\n    },\n    \"utility.startDate\": function utilityStartDate(val) {\n      var endDate = new Date(val).addDays(this.startDateDifferenceInDays);\n      this.options.xAxis[0].max = endDate;\n    }\n  },\n  mounted: function mounted() {\n    this.options.series = this.computedSeries;\n    var endDate = new Date(this.utility.startDate).addDays(this.startDateDifferenceInDays);\n    console.log(endDate);\n    this.options.xAxis[0].max = endDate;\n  },\n  props: {\n    tasks: {\n      required: true\n    }\n  },\n  computed: {\n    duration: function duration() {\n      var duration = 0;\n      var maxProducts = 9;\n      var average, min, max;\n      this.tasks.forEach(function (service) {\n        duration = duration + service.durationEst;\n      });\n      average = Math.round(duration * ((maxProducts * 2 - this.tasks.length) / (maxProducts * 2)));\n      return average;\n    },\n    startDateDifferenceInDays: function startDateDifferenceInDays() {\n      var currentDate = new Date();\n      var startDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);\n\n      var _MS_PER_DAY = 1000 * 60 * 60 * 24;\n\n      var current = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());\n      var start = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());\n      var difference = Math.floor((start - current) / _MS_PER_DAY);\n      return difference;\n    },\n    startDate: function startDate() {\n      var currentDate = new Date();\n      var startDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);\n      return startDate;\n    },\n    allStagesDuration: function allStagesDuration() {\n      var stage1 = this.hasStage(1) ? 0.4 : 0;\n      var stage2 = this.hasStage(2) ? 0.4 : 0;\n      var stage3 = this.hasStage(3) ? 0.2 : 0;\n      return stage1 + stage2 + stage3;\n    },\n    computedSeries: function computedSeries() {\n      this.utility.startDate = this.startDate;\n      this.utility.y = 0;\n      var stage1 = this.computeStage(1, 0.4, this.utility.startDate);\n      var stage2 = this.computeStage(2, 0.4, this.utility.startDate);\n      var stage3 = this.computeStage(3, 0.2, this.utility.startDate);\n      var series = stage1.concat(stage2, stage3);\n      return series;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/assets/components/calc/Timeline.vue?vue&type=script&lang=js&\n /* harmony default export */ const calc_Timelinevue_type_script_lang_js_ = (Timelinevue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./src/assets/components/calc/Timeline.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  calc_Timelinevue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/assets/components/calc/Timeline.vue\"\n/* harmony default export */ const Timeline = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9738\n");

/***/ })

}]);